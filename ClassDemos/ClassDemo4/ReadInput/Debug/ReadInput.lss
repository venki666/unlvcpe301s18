
ReadInput.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000118  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000c4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000118  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000148  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000188  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000016b  00000000  00000000  000001b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000010c  00000000  00000000  0000031b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000129  00000000  00000000  00000427  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00000550  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000191  00000000  00000000  00000584  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000048  00000000  00000000  00000715  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  0000075d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 4e 00 	call	0x9c	; 0x9c <main>
  78:	0c 94 60 00 	jmp	0xc0	; 0xc0 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <readButton>:
		_delay_ms(25);            //Delay between consecutive button presses
	}
}

uint8_t readButton(void){
	if((PINB & (1<<PB7)) == 0){        //If the button was pressed
  80:	1f 99       	sbic	0x03, 7	; 3
  82:	06 c0       	rjmp	.+12     	; 0x90 <readButton+0x10>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  84:	8f e4       	ldi	r24, 0x4F	; 79
  86:	93 ec       	ldi	r25, 0xC3	; 195
  88:	01 97       	sbiw	r24, 0x01	; 1
  8a:	f1 f7       	brne	.-4      	; 0x88 <readButton+0x8>
  8c:	00 c0       	rjmp	.+0      	; 0x8e <readButton+0xe>
  8e:	00 00       	nop
	_delay_ms(25); }        //Debounce the read value
	if((PINB & (1<<PB7)) == 0){        //Verify that the value is the same that what was read
  90:	83 b1       	in	r24, 0x03	; 3
  92:	80 95       	com	r24
	return 1; }            //If it is still 0 its because we had a button press
	else{                    //If the value is different the press is invalid
	return 0; }
	
  94:	88 1f       	adc	r24, r24
  96:	88 27       	eor	r24, r24
  98:	88 1f       	adc	r24, r24
  9a:	08 95       	ret

0000009c <main>:
#include <util/delay.h>        //The delay functions/routines

uint8_t readButton(void);    //Declaration of the readButton function

int main(void){
	DDRB &= ~(1<<PB7);    //Configure PORTB pin 7 as an input
  9c:	27 98       	cbi	0x04, 7	; 4
	PORTB |= (1<<PB7);    //Activate pull-ups in PORTB pin 7
  9e:	2f 9a       	sbi	0x05, 7	; 5
	DDRB |= (1<<PB5);    //Configure PORTB pin 5 an output
  a0:	25 9a       	sbi	0x04, 5	; 4
	
	while(1){                //Infinite loop
		if(readButton()==1){        //Verify the button state
			PORTB ^=(1<<PB5);    //This is the above mentioned XOR that toggles the led
  a2:	c0 e2       	ldi	r28, 0x20	; 32
	DDRB &= ~(1<<PB7);    //Configure PORTB pin 7 as an input
	PORTB |= (1<<PB7);    //Activate pull-ups in PORTB pin 7
	DDRB |= (1<<PB5);    //Configure PORTB pin 5 an output
	
	while(1){                //Infinite loop
		if(readButton()==1){        //Verify the button state
  a4:	0e 94 40 00 	call	0x80	; 0x80 <readButton>
  a8:	81 30       	cpi	r24, 0x01	; 1
  aa:	19 f4       	brne	.+6      	; 0xb2 <main+0x16>
			PORTB ^=(1<<PB5);    //This is the above mentioned XOR that toggles the led
  ac:	85 b1       	in	r24, 0x05	; 5
  ae:	8c 27       	eor	r24, r28
  b0:	85 b9       	out	0x05, r24	; 5
  b2:	8f e4       	ldi	r24, 0x4F	; 79
  b4:	93 ec       	ldi	r25, 0xC3	; 195
  b6:	01 97       	sbiw	r24, 0x01	; 1
  b8:	f1 f7       	brne	.-4      	; 0xb6 <main+0x1a>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <main+0x20>
  bc:	00 00       	nop
  be:	f2 cf       	rjmp	.-28     	; 0xa4 <main+0x8>

000000c0 <_exit>:
  c0:	f8 94       	cli

000000c2 <__stop_program>:
  c2:	ff cf       	rjmp	.-2      	; 0xc2 <__stop_program>
